---
- name: "Include variable from api roles"
  include_vars:
    file: roles/api/vars/main.yml
    name: api

- name: "Sending docker-compose to server"
  template:
    src: "{{ item }}"
    dest: "{{ working_dir }}/cms/"
  with_items:
    - "docker-compose.yml"

- name: "Removing existing API container"
  docker_service:
    project_src: "{{ working_dir }}/cms"
    state: absent

- name: "Freshing data"
  file:
    path: "{{ project_dir }}/cms"
    state: absent
  become: yes
  become_user: root

- name: "Cloning source from git repository"
  git:
    repo: "{{ cms_repo }}"
    version: "{{ cms_branch }}"
    dest: "{{ project_dir }}/cms/html"
    accept_hostkey: yes
    force: yes
    key_file: "{{ working_dir }}/common/deploy-key"
  become: yes
  become_user: root

- name: "Starting cms using docker-compose"
  docker_service:
    project_src: "{{ working_dir }}/cms"
    state: present

- name: "Copying composer"
  command: docker exec {{ container_name }} php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"

- name: "Running composer hash file"
  command: docker exec {{ container_name }} php -r "if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"

- name: "Running composer setup"
  command: docker exec {{ container_name }} php composer-setup.php

- name: "Running unlink composer setup"
  command: docker exec {{ container_name }} php -r "unlink('composer-setup.php');"

- name: "Running apt update"
  command: docker exec {{ container_name }} apt update

- name: "Install libpng-dev"
  command: docker exec {{ container_name }} apt install libpng-dev -y

- name: "Install mbstring"
  command: docker exec {{ container_name }} docker-php-ext-install mbstring

- name: "Install zip"
  command: docker exec {{ container_name }} docker-php-ext-install zip

- name: "Install gd"
  command: docker exec {{ container_name }} docker-php-ext-install gd

- name: "Running composer install"
  command: docker exec {{ container_name }} php composer.phar install

- name: "Change permission 755 storage in html directory"
  command: docker exec {{ container_name }} chmod -R 755 /var/www/html/storage

- name: "Change permission 755 bootstrap/cache in html directory"
  command: docker exec {{ container_name }} chmod -R 755 /var/www/html/bootstrap/cache

- name: "Change owner to www-data:www-data in apache directory"
  command: docker exec {{ container_name }} bash -c 'chown www-data:www-data -R /var/www'

- name: "Copying php.ini-production configuration file out of container"
  command: docker cp {{ container_name }}:/usr/local/etc/php/php.ini-production
          {{ working_dir }}/cms/php.ini

- name: "Replace text to php.ini configuration files"
  replace:
    path: "{{ working_dir }}/cms/php.ini"
    regexp: ';extension=curl'
    replace: 'extension=curl'

- name: "Replace text to php.ini configuration files"
  replace:
    path: "{{ working_dir }}/cms/php.ini"
    regexp: ';extension=mbstring'
    replace: 'extension=mbstring'

- name: "Replace text to php.ini configuration files"
  replace:
    path: "{{ working_dir }}/cms/php.ini"
    regexp: ';extension=openssl'
    replace: 'extension=openssl'

- name: "Replace text to php.ini configuration files"
  replace:
    path: "{{ working_dir }}/cms/php.ini"
    regexp: ';extension=pdo_pgsql'
    replace: 'extension=pdo_pgsql'

- name: "Copying php.ini configuration file to container"
  command: docker cp {{ working_dir }}/cms/php.ini 
          {{ container_name }}:/usr/local/etc/php/conf.d/

- name: "Change owner to root:staff in apache directory"
  command: docker exec {{ container_name }} bash -c 'chown root:staff -R /usr/local/etc/php/conf.d/php.ini'

- name: "Sending apache2.conf to server"
  template:
    src: "{{ item }}"
    dest: "{{ working_dir }}/cms/"
  with_items:
    - "apache2.conf"

- name: "Copying apache2.conf configuration file to container"
  command: docker cp {{ working_dir }}/cms/apache2.conf
          {{ container_name }}:/etc/apache2/

- name: "Enabling own apache2.conf"
  command: docker exec {{ container_name }} chown root:root /etc/apache2/apache2.conf

- name: "Enabling mod apache2.conf"
  command: docker exec {{ container_name }} chmod 644 /etc/apache2/apache2.conf

- name: "Rewirte in apache2"
  command: docker exec {{ container_name }} a2enmod rewrite

- name: "Reload apache2 config"
  command: docker exec {{ container_name }} service apache2 reload

# - name: "Removing apache2.conf configuration file"
#   command: rm {{ working_dir }}/cms/apache2.conf
#   become: yes
#   become_user: root


- name: "Sending docker-php-ext-sodium.ini to server"
  template:
    src: "{{ item }}"
    dest: "{{ working_dir }}/cms/"
  with_items:
    - "docker-php-ext-sodium.ini"

- name: "Copying docker-php-ext-sodium.ini configuration file to container"
  command: docker cp {{ working_dir }}/cms/docker-php-ext-sodium.ini
          {{ container_name }}:/usr/local/etc/php/conf.d/

- name: "Enabling mod rewirte in apache2"
  command: docker exec {{ container_name }} chown root:staff /usr/local/etc/php/conf.d/docker-php-ext-sodium.ini

- name: "Enabling mod rewirte in apache2"
  command: docker exec {{ container_name }} chmod 644 /usr/local/etc/php/conf.d/docker-php-ext-sodium.ini

# - name: "Removing apache2.conf configuration file"
#   command: rm {{ working_dir }}/cms/docker-php-ext-sodium.ini
#   become: yes
#   become_user: root

- name: "Restart w4l.cms container"
  command: docker restart {{ container_name }}